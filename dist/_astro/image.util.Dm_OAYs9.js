const h="modulepreload",p=function(n){return"/"+n},u={},y=function(c,r,l){let a=Promise.resolve();if(r&&r.length>0){document.getElementsByTagName("link");const s=document.querySelector("meta[property=csp-nonce]"),o=s?.nonce||s?.getAttribute("nonce");a=Promise.all(r.map(e=>{if(e=p(e),e in u)return;u[e]=!0;const i=e.endsWith(".css"),d=i?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${e}"]${d}`))return;const t=document.createElement("link");if(t.rel=i?"stylesheet":h,i||(t.as="script",t.crossOrigin=""),t.href=e,o&&t.setAttribute("nonce",o),document.head.appendChild(t),i)return new Promise((m,f)=>{t.addEventListener("load",m),t.addEventListener("error",()=>f(new Error(`Unable to preload CSS for ${e}`)))})}))}return a.then(()=>c()).catch(s=>{const o=new Event("vite:preloadError",{cancelable:!0});if(o.payload=s,window.dispatchEvent(o),!o.defaultPrevented)throw s})},E=/(^|[/\\])([^/\\]+?)(?=(\.[^.]+)?$)/;function v(n){return n.match(E)?.[2]}async function w(n){const c={};let r={};for(const l in n){const a=await n[l]();c[v(l)]=a.default}return r=c,r}export{y as _,w as p};
